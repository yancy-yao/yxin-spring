静态AOP
    相应的横切关注点以Aspect形式实现之后，会通过特定的编译器，将实现后的Aspect编译并织入到系统的静态类中。
    优点：
      Aspect直接以Java字节码的形式编译到Java类中，Java虚拟机可以像通常一样加载java类运行，不会对整个系统的运行造成任何的
性能损失。
    缺点：
      灵活性不够。如果横切关注点需要改变织入到系统的位置，就需要重新修改Aspect定义文件，然后使用编译器重新编译Aspect并重
新织入到系统中。

动态AOP
    动态AOP的实现产品大都在类加载或者系统运行期间，采用对系统字节码进行操作的方式来完成Aspect到系统的织入，会造成一定的
运行时性能损失。
    实现机制
        动态代理（Spring AOP默认情况）：
            在运行期间，为相应的接口动态生成对应的代理对象。我们可以将横切关注点逻辑封装在动态代理的InvocationHandler中
，然后在系统运行期间，根据横切关注点需要织入的模块位置，将横切关注点逻辑织入到相应的代理类中。
            优缺点：
                所有需要织入横切关注点逻辑的模块类都得实现相应的接口，因为动态代理机制只针对接口有。

         动态字节码增强：
            在程序运行期间，动态构建字节码的class文件。
            使用动态字节码增强技术，即使模块类没有实现相应的接口，我们依然可以对其进行扩展，而不用像动态代理那样受限于接
口。不足：如果需要扩展的类以及勒种的实例方法等声明为final的话，则无法对其进行子类话的扩展。
            Spring AOP在无法采用动态代理机制进行AOP功能扩展的时候，会使用CGLIB库的动态字节码增强支持来实现AOP的功能扩展。

自定义类加载器
    通过读取外部文件规定的织入规则和必要信息，在加载class文件期间就可以将横切逻辑添加到系统模块类的现有逻辑中，然后将改
动后的class交给java虚拟机运行。

AOP实现机制
    动态代理机制和字节码生成技术实现。如果Spring AOP发现目标对象实现了对应Interface，则采用动态代理机制为其生成代理对象
实例。而如果目标对象没有实现任何interface，Spring AOP会尝试使用一个称为CGLIB 的开源的动态字节码生成类库，为目标对象生成
动态的代理对象实例。
    TODO 静态代理 动态代理例子

    动态字节码生成

源码
    1.编程方式织入
        AspectJProxyFactory
    2.通过自动代理织入
        AutoProxyCreator实现类进行自动代理。
        AnnotationAwareAspectJAutoProxyCreator自动搜集IOC容器中注册的Aspect，并应用到Pointcut定义的各个目标对象上。
        <aop:aspectj-autoproxy>

    @AspectJ形式Pointcut的声明方式
        execution

     AspectJExpressionPointcut

